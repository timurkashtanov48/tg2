import pymysql.cursors
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ContentType
from aiogram.utils.markdown import hbold, hitalic, hcode

from config import BOT_TOKEN, HOST, PORT, USER, PASSWORD, DB_NAME, DEFAULT_PARSE_MODE, SUPPORT_USERNAME, ADMIN_ID, \
    RULES, CATEGORIES, PAYMENTS

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())


def connect(db_name=None):
    try:
        connection_ = pymysql.connect(
            host=HOST,
            port=PORT,
            user=USER,
            password=PASSWORD,
            database=db_name,
            cursorclass=pymysql.cursors.DictCursor
        )

        print("Connection Successful")
        return connection_
    except Exception as err:
        print("Connection was failed")
        print(err)


connection = connect(DB_NAME)
cursor = connection.cursor()

main_keyboard = ReplyKeyboardMarkup(row_width=2, keyboard=[
    [
        KeyboardButton("üèß –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–∏"),
    ],
    [
        KeyboardButton("üíª –ü—Ä–æ—Ñ–∏–ª—å"),
    ],
    [
        KeyboardButton("üìú –ü—Ä–∞–π—Å"),
        KeyboardButton("üìñ –ü—Ä–∞–≤–∏–ª–∞")
    ],
    [
        KeyboardButton("üí∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
    ]
], resize_keyboard=True)


class States(StatesGroup):
    upload_file = State()
    withdraw_payment = State()
    withdraw_payment_contacts = State()


@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    if cursor.execute(f"SELECT * FROM `users` WHERE user_id={message.from_user.id}") == 0:
        cursor.execute(f"INSERT INTO `users`(user_id, username, balance, total_earnings) VALUES (%s, %s, %s, %s)",
                       (message.from_user.id, message.from_user.username, 0, 0))
        connection.commit()
    text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {hbold(message.from_user.first_name)}!\n\n" \
           f"{hitalic('–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –ª–æ–≥–æ–≤!')}\n\n" \
           f"{hbold('–°–æ–∑–¥–∞—Ç–µ–ª—å')}: @dkhodos"
    await message.reply(text=text, reply_markup=main_keyboard, parse_mode=DEFAULT_PARSE_MODE)


@dp.message_handler(commands=["init"])
async def init(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        if cursor.execute(f"SELECT * FROM `categories`") == 0:
            for category, price_ in CATEGORIES:
                cursor.execute(f"INSERT INTO `categories`(category, price) VALUES (%s, %s)",
                               (category, price_))
                connection.commit()
            await message.reply(text=hbold("–ü—Ä–æ–µ–∫—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!"), parse_mode=DEFAULT_PARSE_MODE)
        else:
            await message.reply(f"{hbold('–ü—Ä–æ–µ–∫—Ç —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!')}", parse_mode=DEFAULT_PARSE_MODE)
    else:
        await message.reply(f"{hbold('–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!')}", parse_mode=DEFAULT_PARSE_MODE)


@dp.callback_query_handler(text_startswith="category_")
async def send_logs(callback_data: types.CallbackQuery):
    _, category = callback_data.data.split("_")
    await callback_data.message.edit_text(text=hbold("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞—Ä—Ö–∏–≤ —Å –ª–æ–≥–∞–º–∏:"),
                                          parse_mode=DEFAULT_PARSE_MODE)
    state = Dispatcher.get_current().current_state()
    await state.update_data(category=category)
    await States.upload_file.set()


@dp.message_handler(state=States.upload_file, content_types=[ContentType.DOCUMENT])
async def upload_logs_state(message: types.Message, state: FSMContext):
    await state.update_data(file_id=message.document["file_id"])
    data = await state.get_data()
    category = data["category"]
    file_id = data["file_id"]
    cursor.execute(f"INSERT INTO `logs`(sender_id, log, is_checked, category) VALUES (%s, %s, %s, %s)",
                   (message.from_user.id, file_id, False, category))
    connection.commit()
    cursor.execute(f"SELECT id FROM `logs` WHERE sender_id = {message.from_user.id} AND log = '{file_id}'")
    id_ = dict(cursor.fetchone())['id']
    admin_text = f"{hbold('–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç—Ä–∞–±–æ—Ç–∫—É')} {hcode('#' + str(id_))}\n\n" \
                 f"{hbold('ID:')} {hcode(message.from_user.id)}\n" \
                 f"{hbold('Username:')} {hcode(message.from_user.username)}\n" \
                 f"{hbold('–ó–∞–ø—Ä–æ—Å:')} {hcode(category)}"
    admin_keyboard = InlineKeyboardMarkup(row_width=2, inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úîÔ∏è –ù–∞—á–∏—Å–ª–∏—Ç—å",
                                 callback_data=f"admin_answer_allow_{message.from_user.id}_{id_}_{category}"),
            InlineKeyboardButton(text="‚ùå –ü—É—Å—Ç–æ",
                                 callback_data=f"admin_answer_empty_{message.from_user.id}_{id_}_{category}")
        ]
    ])
    await message.reply(text=hbold(f"–í–∞—à —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º #{id_}!"),
                        parse_mode=DEFAULT_PARSE_MODE)

    await bot.send_document(chat_id=ADMIN_ID, document=file_id, caption=admin_text, parse_mode=DEFAULT_PARSE_MODE,
                            reply_markup=admin_keyboard)
    await state.finish()


@dp.callback_query_handler(text_startswith="admin_answer_")
async def admin_answer(callback_data: types.CallbackQuery):
    _, _, answer, user_id, log_id, category = callback_data.data.split("_")

    if answer == "allow":
        cursor.execute(
            f"UPDATE `logs` SET is_checked=True WHERE sender_id={user_id} AND id={log_id}")
        connection.commit()
        cursor.execute(f"SELECT price FROM `categories` WHERE category = '{category}'")
        price_ = dict(cursor.fetchone())['price']
        cursor.execute(f"SELECT balance FROM `users` WHERE user_id = {user_id}")
        user_balance = dict(cursor.fetchone())['balance']
        cursor.execute(f"SELECT total_earnings FROM `users` WHERE user_id = {user_id}")
        user_total_earnings = dict(cursor.fetchone())['total_earnings']

        cursor.execute(
            f"UPDATE `users` SET balance={user_balance + price_} WHERE user_id={user_id}")
        connection.commit()
        cursor.execute(
            f"UPDATE `users` SET total_earnings={user_total_earnings + price_} WHERE user_id={user_id}")
        connection.commit()
        await bot.send_message(chat_id=user_id,
                               text=hbold(f"–í–∞—à –ª–æ–≥ #{log_id} –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥!\n\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ: {price_} —Ä—É–±."),
                               parse_mode=DEFAULT_PARSE_MODE)
        await callback_data.message.delete_reply_markup()
    else:
        cursor.execute(
            f"UPDATE `logs` SET is_checked=True WHERE sender_id={user_id} AND id={log_id}")
        connection.commit()
        await bot.send_message(chat_id=user_id, text=hbold(f"–í –±–∞–∑–µ #{log_id} –Ω–µ –Ω–∞—à–ª–∏ –≤–∞–ª–∏–¥–∞!"),
                               parse_mode=DEFAULT_PARSE_MODE)
        await callback_data.message.delete_reply_markup()


@dp.message_handler(text="üèß –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–∏")
async def upload_logs(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(text=category, callback_data=f"category_{category}")] for category, _ in CATEGORIES
    ])
    keyboard.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    await message.reply(text=hbold("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å: "), reply_markup=keyboard, parse_mode=DEFAULT_PARSE_MODE)


@dp.callback_query_handler(text="cancel")
async def cancel(callback_data: types.CallbackQuery):
    await callback_data.message.edit_text(text=hbold("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!"), parse_mode=DEFAULT_PARSE_MODE)


@dp.message_handler(text="üíª –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: types.Message):
    cursor.execute(f"SELECT balance FROM `users` WHERE user_id={message.from_user.id}")
    balance = dict(cursor.fetchone())["balance"]
    cursor.execute(f"SELECT total_earnings FROM `users` WHERE user_id={message.from_user.id}")
    total_earnings = dict(cursor.fetchone())["total_earnings"]
    text = f"üìî {hbold('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')}\n\n" \
           f"üíé {hbold('–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: ')}{hcode(message.from_user.id)}\n" \
           f"üë§ {hbold('–ù–∏–∫–Ω–µ–π–º: ')} {hcode(message.from_user.username)}\n" \
           f"üí∏ {hbold('–ë–∞–ª–∞–Ω—Å: ')}{hcode(balance)} —Ä—É–±.\n\n" \
           f"üí≤ {hbold('–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ —Å –Ω–∞–º–∏: ')}{hcode(total_earnings)} —Ä—É–±."

    keyboard = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton("üí∏ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw")],
        [InlineKeyboardButton("‚åö –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ª–æ–≥–∏", callback_data="uncheked_logs")],
        [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"t.me/{SUPPORT_USERNAME[1::]}")]
    ])

    await message.reply(text, reply_markup=keyboard, parse_mode=DEFAULT_PARSE_MODE)


@dp.callback_query_handler(text="withdraw")
async def withdraw(callback_data: types.CallbackQuery):
    cursor.execute(f"SELECT balance FROM `users` WHERE user_id={callback_data.from_user.id}")
    user_balance = dict(cursor.fetchone())["balance"]
    if user_balance <= 0:
        await callback_data.message.reply(text=hbold("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!"), parse_mode=DEFAULT_PARSE_MODE)
    else:
        keyboard = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
            [InlineKeyboardButton(text=payment, callback_data=f"payment_{payment}")] for payment in PAYMENTS
        ])
        keyboard.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))
        await callback_data.message.edit_text(text=hbold("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ –≤—ã–≤–æ–¥–∏—Ç—å:"), reply_markup=keyboard,
                                              parse_mode=DEFAULT_PARSE_MODE)


@dp.callback_query_handler(text_startswith="payment_")
async def withdraw_payment(callback_data: types.CallbackQuery):
    _, payment = callback_data.data.split("_")

    if payment in PAYMENTS:
        await callback_data.message.edit_text(text=hbold("–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:"), parse_mode=DEFAULT_PARSE_MODE)
        state = Dispatcher.get_current().current_state()
        await state.update_data(payment_method=payment)
        await States.withdraw_payment.set()
    else:
        await callback_data.message.answer(text=hbold("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"), parse_mode=DEFAULT_PARSE_MODE)


@dp.message_handler(state=States.withdraw_payment)
async def withdraw_payment_state(message: types.Message, state: FSMContext):
    cursor.execute(f"SELECT balance from `users` WHERE user_id={message.from_user.id}")
    balance = dict(cursor.fetchone())["balance"]
    if int(message.text) > balance:
        await message.reply(text=hbold("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞!"), parse_mode=DEFAULT_PARSE_MODE)
    else:
        await state.update_data(payment_amount=message.text)
        await message.reply(text=hbold("–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞: "), parse_mode=DEFAULT_PARSE_MODE)
        await States.withdraw_payment_contacts.set()


@dp.message_handler(state=States.withdraw_payment_contacts)
async def withdraw_payment_contacts(message: types.Message, state: FSMContext):
    await state.update_data(payment_contacts=message.text)
    data = await state.get_data()
    payment_method = data["payment_method"]
    payment_amount = data["payment_amount"]
    payment_contacts = data["payment_contacts"]

    text = f"{hbold('–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥!')}\n\n" \
           f"{hbold('–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:')} {hcode(payment_method)}\n" \
           f"{hbold('–°—É–º–º–∞:')} {hcode(payment_amount)} —Ä—É–±.\n" \
           f"{hbold('–ö–æ–Ω—Ç–∞–∫—Ç:')} {hcode(payment_contacts)}\n" \
           f"{hbold('Username:')} {hcode('@' + message.from_user.username)} "
    keyboard = InlineKeyboardMarkup(row_width=2, inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úîÔ∏è–û–¥–æ–±—Ä–∏—Ç—å",
                                 callback_data=f"withdrawreq_accept_{payment_amount}_{message.from_user.id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                                 callback_data=f"withdrawreq_decline_{payment_amount}_{message.from_user.id}"),
        ]
    ])
    await bot.send_message(chat_id=ADMIN_ID, text=text, reply_markup=keyboard, parse_mode=DEFAULT_PARSE_MODE)
    await state.finish()


@dp.callback_query_handler(text_startswith="withdrawreq_")
async def withdraw_admin(callback_data: types.CallbackQuery):
    _, answer, amount, user_id = callback_data.data.split("_")

    if answer == "accept":
        cursor.execute(f"SELECT balance from `users` WHERE user_id={user_id}")
        balance = dict(cursor.fetchone())["balance"]

        cursor.execute(f"UPDATE `users` SET balance={balance - int(amount)} WHERE user_id={user_id}")
        connection.commit()

        await bot.send_message(chat_id=user_id, text=hbold(f"–í–∞—à –∑–∞–ø—Ä–æ—Å, –Ω–∞ –≤—ã–≤–æ–¥ {amount} —Ä—É–±., –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω!"),
                               parse_mode=DEFAULT_PARSE_MODE)
        await callback_data.message.delete_reply_markup()
    else:
        await bot.send_message(chat_id=user_id, text=hbold(f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!\n\n"
                                                           f"–°—É–º–º–∞: {amount} —Ä—É–±.\n"
                                                           f"–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ {SUPPORT_USERNAME}"),
                               parse_mode=DEFAULT_PARSE_MODE
                               )
        await callback_data.message.delete_reply_markup()


@dp.callback_query_handler(text="uncheked_logs")
async def uncheked_logs(callback_data: types.CallbackQuery):
    cursor.execute(f"SELECT * FROM `logs` WHERE sender_id={callback_data.from_user.id} AND is_checked=False")
    logs = cursor.fetchall()
    if len(logs) <= 0:
        await callback_data.message.reply(
            text=hbold("‚ùå –í—ã –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–æ–≥–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∏–ª–∏ –≤—Å–µ –ª–æ–≥–∏ –±—ã–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!"),
            parse_mode=DEFAULT_PARSE_MODE)
    else:
        text = f"‚åö {hbold('–£ –≤–∞—Å')} {hcode(len(logs))} {hbold('–Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤ :(')}\n\n"
        output = []
        for log in logs:
            dict_log = dict(log)
            output.append(
                f"ID {hcode('#' + str(dict_log['id']))} {hbold('–ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å')} -- {hcode(dict_log['category'])}")

        text = text + "\n".join(output)
        await callback_data.message.reply(text=text, parse_mode=DEFAULT_PARSE_MODE)


@dp.message_handler(text="üìñ –ü—Ä–∞–≤–∏–ª–∞")
async def rules(message: types.Message):
    await message.reply(f"{hbold('üìñ –ü—Ä–∞–≤–∏–ª–∞:')}\n\n{hbold(RULES)}", parse_mode=DEFAULT_PARSE_MODE)


@dp.message_handler(text="üí∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
async def shop_requests(message: types.Message):
    categories = [f"{category}\n" for category, _ in CATEGORIES]
    await message.reply(f"{hbold('üîé –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Å–∫—É–ø–∞–µ–º:')}\n\n{hcode(''.join(categories))}",
                        parse_mode=DEFAULT_PARSE_MODE)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
